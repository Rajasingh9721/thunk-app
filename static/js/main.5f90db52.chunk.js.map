{"version":3,"sources":["actions/actions.js","App.js","serviceWorker.js","reducer/reducer.js","index.js"],"names":["onDepositSync","amt","type","value","App","className","style","color","this","props","bal","onClick","deposit","withdraw","React","Component","connect","state","dispatch","setTimeout","Boolean","window","location","hostname","match","initialState","reducer","action","newState","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4QAaaA,EAAgB,SAACC,GAC1B,MAAO,CAACC,KAAK,UAAUC,MAAMF,I,OCV3BG,G,6KAEA,OACE,yBAAKC,UAAU,OACZ,uCAAY,0BAAMC,MAAO,CAACC,MAAM,QAASC,KAAKC,MAAMC,MACpD,4BAAQC,QAASH,KAAKC,MAAMG,SAA5B,WACA,4BAAQD,QAASH,KAAKC,MAAMI,UAA5B,iB,GANOC,IAAMC,YAsBTC,eAXC,SAACC,GACb,MAAM,CACFP,IAAMO,EAAMP,QAGP,SAACQ,GACV,MAAM,CACJN,QAAU,WDjBS,IAACX,ECiBJiB,GDjBIjB,ECiBuB,IDhBtC,SAACiB,GACJC,YAAW,WACPD,EAASlB,EAAcC,MACzB,SCcJY,SAAU,WAAMK,EDtBX,CAAChB,KAAK,WAAWC,MCsBsB,UAGnCa,CAAsBZ,GCdjBgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YClBAC,EAAe,CACjBf,IAAM,KAcKgB,EAZC,WAA8B,IAA7BT,EAA4B,uDAAtBQ,EAAaE,EAAS,uCACnCC,EAAQ,eAAOX,GACrB,OAAOU,EAAOzB,MACV,IAAK,UACD0B,EAASlB,KAAKiB,EAAOxB,MACrB,MACJ,IAAK,WACDyB,EAASlB,KAAKiB,EAAOxB,MAG7B,OAAOyB,G,eCHLC,EAAQC,YAAYJ,EAAQK,YAAgBC,MAElDC,IAASC,OACP,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,OAEFM,SAASC,eAAe,SFmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5f90db52.chunk.js","sourcesContent":["export const onWithdraw = (amt)=>{\r\n    return {type:\"WITHDRAW\",value:amt};\r\n};\r\n\r\n\r\nexport const onDeposit = (amt)=>{\r\n    return (dispatch)=>{\r\n        setTimeout(()=>{\r\n            dispatch(onDepositSync(amt));\r\n        },5000);\r\n    }\r\n}\r\n\r\nexport const onDepositSync = (amt)=>{\r\n    return {type:\"DEPOSIT\",value:amt};\r\n}","import React,{ Component } from \"react\";\nimport * as actions from \"./actions/actions\";\nimport { connect } from \"react-redux\";\nimport \"./App.css\";\nclass App extends React.Component{\n    render(){\n      return(\n        <div className=\"App\">\n           <h1>Balance:<span style={{color:\"red\"}}>{this.props.bal}</span></h1>\n           <button onClick={this.props.deposit}>DEPOSIT</button>\n           <button onClick={this.props.withdraw}>WITHDRAW</button>\n        </div>\n      )\n    }\n};\nconst receive = (state)=>{\n    return{\n        bal : state.bal\n    }\n};\nconst send = (dispatch)=>{\n    return{\n      deposit : ()=>{ dispatch(actions.onDeposit(5000)) },\n      withdraw: ()=>{ dispatch(actions.onWithdraw(1000)) }\n    }\n};\nexport default connect(receive,send)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\r\n    bal : 5000\r\n};\r\nconst reducer = (state=initialState,action)=>{\r\n    const newState = {...state};    \r\n    switch(action.type){\r\n        case \"DEPOSIT\":\r\n            newState.bal+=action.value;\r\n            break;\r\n        case \"WITHDRAW\":\r\n            newState.bal-=action.value;\r\n            break;\r\n    }\r\n    return newState;\r\n};\r\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport reducer from \"./reducer/reducer\";\nimport { createStore,applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { Provider } from \"react-redux\";\nconst store = createStore(reducer,applyMiddleware(thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}